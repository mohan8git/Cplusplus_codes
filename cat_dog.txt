import cv2
import numpy as np
import os
import matplotlib.pyplot as plt
from keras.layers import Conv2D,MaxPooling2D
from keras.layers import Dropout,Dense,Flatten,Activation
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing.image import img_to_array, load_img

def pre_pro(Dir,img_h,img_w):
    y = []
    x = []
    for img in os.listdir(Dir):
        t=[]
        label = img.split('.')[-3]
        if label == 'cat':
            t = [1,0]
        elif label == 'dog' :
            t = [0,1]
        path = os.path.join(Dir,img)    
        img = cv2.imread(path,cv2.IMREAD_COLOR)
        img = cv2.resize(img,(img_h,img_w))
        x.append(np.array(img))
        y.append(t)
    x = np.array(x)
    y = np.array(y)
    
    return x,y


img_h = 100
img_w = 100

Train = 'pics/Train'
Valid = 'pics/Valid'

train_x,train_y = pre_pro(Train,img_h,img_w)
print('\nTraining input data dimensions',train_x.shape,'\nTraining output data dimensions',train_y.shape)


valid_x,valid_y = pre_pro(Valid,img_h,img_w)
print('\n\nValidation input data dimensions',valid_x.shape,'\nValidation output data dimensions',valid_y.shape)

model = Sequential()

model.add(Conv2D(20, (3, 3), input_shape=(img_w, img_h, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(20, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Conv2D(40, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

model.add(Flatten())

model.add(Dense(100))
model.add(Activation('relu'))



model.add(Dense(50))
model.add(Activation('relu'))

model.add(Dropout(0.5))

model.add(Dense(10))
model.add(Activation('relu'))

model.add(Dense(2))
model.add(Activation('softmax'))

model.compile(loss='binary_crossentropy',
              optimizer='rmsprop',
              metrics=['accuracy'])

model.summary()

model.fit(train_x, train_y,
          epochs=30,
          batch_size=30,
          validation_data=(valid_x, valid_y))
model.save_weights('weights.h5')



Test = 'pics/Test'
for img in os.listdir(Test):
    path = os.path.join(Test,img)
    img = cv2.imread(path,cv2.IMREAD_COLOR)
    img = cv2.resize(img,(img_h,img_w))
    plt.imshow(img)
    plt.show()
    test_img = np.array(img) 
    np.save("test.npy",test_img)
    test_img= np.expand_dims(test_img, axis=0)
    y = model.predict(test_img)
    if y[0][0]>y[0][1]:
        print('           Its cat')
    elif  y[0][1]>y[0][0]:
        print('           Its dog')




