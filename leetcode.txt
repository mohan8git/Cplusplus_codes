/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
       stack<ListNode*> lstack;
        
        ListNode* t=head;
        while(t!=NULL)
        {
            lstack.push(t);
            t=t->next;
        }
        
        while(head!=NULL)
        {
            if(head->val!=lstack.top()->val)
            {return false;}
            lstack.pop();
            head=head->next;
        }
        return true;
        
    }
};

---------------------------------------
 for(auto x:nums)
        {
        mp[x]++;
        }
        
         for(auto x:mp)
        {
        if(x.second==1)
        {
            r=x.first;
            break;
        }
        }


=======================================
class Solution {
public:
    char findTheDifference(string s, string t) {
        int arr[26]{0};
        for(char ch:s)
        {   
            arr[ch-'a']++;
        }
        for(char ch:t)
        {   if(arr[ch-'a']==0)
            return ch;
            else
                arr[ch-'a']--;
        }
        return 0;
    }
};
==================================================

class Solution {
public:
    bool hasAlternatingBits(int n) {
        int lastbit=n%2;
        int currbit;
        while(n)
        {
            n=n/2;
            currbit=n%2;
            if(currbit==lastbit)
                return false;
            else
            {
                lastbit=currbit;
            }
        }
        return true;
        
    }
};

=======================================================

class Solution {
public:
    int hammingWeight(uint32_t n) {                //counting no of set bits.
        int r=0;
        while(n>0)
        {
            n=(n&(n-1));
            r++;
        }
        return r;
    }
};

=================================
public:
    int hammingDistance(int x, int y) {
        int z=x^y;
        int r=0;
        while(z)
        {
            z=z&(z-1);
            r++;
        }
        return r;
    }
};

=============================================





    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        if(nums.empty())
        {return res;}
        
        
         sort(nums.begin(),nums.end());
        int n=nums.size()-1;
        for(int i=0;i<n;i++)                                                           //3 sum
        {   
            if(nums[i]>0) break;
            if(i>0 && nums[i]==nums[i-1]) continue;
           
            
            int left=i+1, right=n-1;
            while(left<right)
            {
                int sum=nums[i]+nums[left]+nums[right];
                if(sum<0)
                    left++;
                else if(sum>0)
                    right--;
                else{
                    
                  res.push_back({nums[i],nums[left],nums[right]});
                    int last_left=nums[left];
                    int last_right=nums[right];
                    while(left<right and nums[left]==last_left) left++;
                    while(left<right and nums[right]==last_right) right--;
                    
                }
                
                
            }
            
        }
       return res;
    }
    ================================================================
Search in rotated array

class Solution {
public:
    int search(vector<int>& nums, int target) {
        if(nums.size()==0) return -1;
        
        int l=0;
        int r=nums.size()-1;
     
        while(l<r)
        {
            int m=l+(r-l)/2;
 
            if(nums[m]>nums[r])
            {
                l=m+1;
            }
            else
                r=m;
        }
        int start=l;
         l=0;
        r=nums.size()-1;
        if(target>=nums[start] and target<=nums[r])
             l=start;
            else
                r=start;
        
            
        
         while(l<r)
        {
            int m=l+(r-l)/2;
            if(nums[m]==target) return m;
            
            else if(nums[m]<target)
            {
                l=m+1;
            }
            else
                r=m-1;
        }
        
       return (l == r and nums[l] == target) ? l : -1;
    }
};
========================================================================================== 
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int min=INT_MAX;
        int maxt=0;
//         for(int i=0;i<prices.size();i++)
//         {
//             for(int j=i+1;j<prices.size();j++)
//             {
//                 int t=prices[j]-prices[i];
//                 if(t>profit)
//                     profit=t;
//             }
//         }
        
        for(int i=0;i<prices.size();i++)
        {
            if(prices[i]<min)
                min=prices[i];
            else
            {
                maxt=max(maxt,prices[i]-min);
            }
        }
        
        
        
        return maxt;
        
    }
};
========================================

int maxProfit(vector<int>& prices) {
        int profit=0;
        if(prices.size()==0) return 0;
        
        for(int i=0;i<prices.size()-1;i++)
        {
            if(prices[i+1]>prices[i])
                profit+=prices[i+1]-prices[i];
        }
        
        return profit;
    }
===============================================
class Solution {
public:
    vector<int> intersection(vector<int>& nums1, vector<int>& nums2) {
        unordered_set<int> uni_ele{nums1.begin(),nums1.end()};
        
        vector<int> res;
        for(auto x: nums2)
        {
            auto it=uni_ele.find(x);
            
            if(it!=uni_ele.end())
            {
                res.emplace_back(x);
                uni_ele.erase(it);
            }
        }
        return res;
    }
};              intersection of 2 array
=====================

class Solution {
public:
    bool isAnagram(string s, string t) {
        sort(s.begin(),s.end());                            sorting string
        sort(t.begin(),t.end());
        if(s.compare(t)==0) return true;
        else
            return false;
        
    }
};
#soln 2
bool isAnagram(std::string s, std::string t) 
{
    std::unordered_map<char, int> ma;
    std::unordered_map<char, int> mb;
    
    for(const auto &el: s)
    {
        ma[el]++;
    }
    
    for(const auto &el: t)
    {
        mb[el]++;
    }
    
    return ma == mb; 
}
===============================================
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {
       for(int i=digits.size()-1;i>=0;i--)
       {
           if(digits[i]==9)
               digits[i]=0;
           else{
               digits[i]++;                          //adding 1 to an array
               return digits;
           }
           
       }
        
        digits.emplace(digits.begin(),1);
        return digits;
    }
};
==========================================